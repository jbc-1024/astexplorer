"use strict";var tagTreeFromDict=function(t,n,a,s){var c;if(contains(t,a)){for(var e="",r=0,o=Object.keys(t);r<o.length;r++){var l=o[r],p=t[l],i="",u="",g=(canOpenClose(p)&&(i="key-entry",u="underline"),""),d=(contains(p,a)&&(g="open"),n.concat([l])),p=tagTree(p,d,a,s),d=JSON.stringify(d);e+='\n\t\t\t<li class="dict-element">\n\t\t\t\t<span data-indice='.concat(d,' class="').concat(i," ").concat(u," ").concat(g,' dict-key">').concat(l,'</span>\n\t\t\t\t<span class="p">:</span>\n\t\t\t\t').concat(p,"\n\t\t\t</li>\n\t\t\t")}return'\n\t\t<span class="dict detailed">\n\t\t\t<span class="p"> { </span>\n\t\t\t\t<ul>\n\t\t\t\t\t'.concat(e,'\n\t\t\t\t</ul>\n\t\t\t<span class="p"> } </span>\n\t\t</span>')}return c=Object.keys(t).join(", "),'\n\t\t<span class="dict">\n\t\t\t<span class="p"> { </span>\n\t\t\t<span class="general"> '.concat(c,' </span>\n\t\t\t<span class="p"> } </span>\n\t\t</span>')},tagTreeFromArray=function(t,n,a,s){var c,e;if(contains(t,a)){for(var r="",o=0;o<t.length;o+=1){var l=t[o],p=n.concat([o]),l=tagTree(l,p,a,s);r+='\n\t\t\t<li class="array-element">\n\t\t\t\t'.concat(l,"\n\t\t\t</li>\n\t\t\t")}return'\n\t\t<span class="array detailed">\n\t\t\t<span class="p"> [ </span>\n\t\t\t\t<ul>\n\t\t\t\t\t'.concat(r,'\n\t\t\t\t</ul>\n\t\t\t<span class="p"> ] </span>\n\t\t</span>')}return e="",0!=(c=t.length)&&(e="".concat(c," element")),'\n\t\t<span class="array">\n\t\t\t<span class="p"> [ </span>\n\t\t\t<span class="general"> '.concat(e,' </span>\n\t\t\t<span class="p"> ] </span>\n\t\t</span>')},tagTreeFromNode=function(t,n,a,s){var c=tagTreeFromDict(t,n,a,s),e="",r="",o=(contains(t,a)&&(e="detailed",r="open"),""),s=(s&&t==a&&(o="highlight"),JSON.stringify(n));return'\n\t<span class="node '.concat(o," ").concat(e,'">\n\t\t<span data-indice=').concat(s,' class="type-entry underline ').concat(r,'">').concat(t.type,"</span>\n\t\t").concat(c,"\n\t</span>\n\t")},tagTreeFromBool=function(t){return'<span class="bool">'.concat(t,"</span>")},tagTreeFromNumber=function(t){return'<span class="number">'.concat(t,"</span>")},tagTreeFromString=function(t){return'<span class="string"> \''.concat(t,"' </span>")},tagTreeFromNull=function(t){return'<span class="null"> '.concat(t," </span>")},tagTree=function(t,n,a){var s=3<arguments.length&&void 0!==arguments[3]&&arguments[3];return isDict(t)?(isNode(t)?tagTreeFromNode:tagTreeFromDict)(t,n,a,s):isArray(t)?tagTreeFromArray(t,n,a,s):isBool(t)?tagTreeFromBool(t):isNumber(t)?tagTreeFromNumber(t):isString(t)?tagTreeFromString(t):isNull(t)?tagTreeFromNull(t):void 0};