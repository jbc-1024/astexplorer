"use strict";var tagTokensFromDict=function(n){for(var a=Object.keys(n),e="",r=0,t=a;r<t.length;r++){var o=t[r],c=n[o],s="";canOpenClose(c)&&(s="open-entry"),c=tagTokens(c),e+='\n        <li  class="dict-element openable-wapper">\n            <span class="'.concat(s,"\" style='color:#636468'>").concat(o,"</span>\n            <span>:</span> \n            <span>").concat(c,"</span>\n        </li>")}for(var l="",p=0,i=a;p<i.length;p++){var u=i[p],y=n[u];isDict(y)?y="{...}":isArray(y)&&(y="Array(".concat(d.length,") ")),l+="\n        <span>\n            ".concat(u,": ").concat(y,",\n        </span>")}return openableTamplate(e,l,"dict")},tagTokensFromArray=function(n){for(var a="Array(".concat(n.length,") "),e="",r=0;r<n.length;r+=10)e+=tagTokensFromArrayGroup(n,r,r+10);undetailed=null;var t=openableTamplate(e,null,"array");return"\n    <span class='node'>\n        <span class='open-entry'>\n            ".concat(a,"\n        </span>\n\n        ").concat(t,"\n        \n    </span>\n    ")},tagTokensFromArrayGroup=function(n,a,e){for(var r="[".concat(a," .... ").concat(e,"]"),t="",o=a;o<e;o++){var c=n[o];c=tagTokens(c),t+="<li class='dict-element openable-wapper' data-indice='".concat(o,"'>\n            <span class=\"open-entry\" style='color:#821D79'>").concat(o,"</span>\n            :\n            ").concat(c,"\n        <li>\n        ")}var s=openableTamplate(t,null,"array");return"\n    <span class='node openable-wapper'>\n        <li class='open-entry'> ".concat(r," </li>\n        ").concat(s,"\n        \n    </span>\n    ")},tagTokens=function(n){return isDict(n)?tagTokensFromDict(n):isArray(n)?tagTokensFromArray(n):isBool(n)?n:isNumber(n)?n:isString(n)?n:isNull(n)?n:void 0};