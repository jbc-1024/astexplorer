"use strict";var openableTamplate=function(t,n,a){var e={array:"[",dict:"{"},c={array:"]",dict:"}"},r='\n\t\t<span class="p"> '.concat(e[a]," </span>\n\t\t\t<ul>\n\t\t\t\t").concat(t,'\n\t\t\t</ul>\n\t\t<span class="p"> ').concat(c[a]," </span>\n\t\t"),s='\n\t\t<span class="p"> '.concat(e[a],' </span>\n\t\t<span class="general"> ').concat(n,' </span>\n\t\t<span class="p"> ').concat(c[a]," </span>\n\t");return"<span  class='".concat(a,' openable\'>\n\t\t<span class="detailed hide">\n\t\t\t').concat(t?r:"",'\n\t\t</span>\n\t\t<span class="undetailed">\n\t\t\t').concat(n?s:"","\n\t\t</span>\n\t\t\n\t</span>")},tagTreeFromDict=function(t,n){for(var a="",e=0,c=Object.keys(t);e<c.length;e++){var r=c[e],s=t[r],o="";canOpenClose(s)&&(o="open-entry");var l=n.concat([r]);s=tagTree(s,l),a+="\n\t\t<li data-indice='".concat(l.join("."),'\' class="openable-wapper dict-element">\n\t\t\t<span  class="').concat(o,' dict-key">').concat(r,'</span>\n\t\t\t<span class="p">:</span>\n\t\t\t').concat(s,"\n\t\t</li>\n\t\t")}var p=Object.keys(t).join(", ");return openableTamplate(a,p,"dict")},tagTreeFromArray=function(t,n){for(var a="",e=0;e<t.length;e+=1){var c=t[e],r=n.concat([e]);c=tagTree(c,r),a+="\n\t\t<li data-indice='".concat(r.join("."),'\' class="array-element">\n\t\t\t').concat(c,"\n\t\t</li>\n\t\t")}var s=t.length,o="";return 0!=s&&(o="".concat(s," element")),openableTamplate(a,o,"array")},tagTreeFromNode=function(t,n){var a=tagTreeFromDict(t,n);return"\n\t<span  data-indice='".concat(n.join("."),'\' class="openable-wapper node">\n\t\t<span  class="open-entry">').concat(t.type,"</span>\n\t\t").concat(a,"\n\t</span>\n\t")},tagTreeFromBool=function(t){return'<span class="bool">'.concat(t,"</span>")},tagTreeFromNumber=function(t){return'<span class="number">'.concat(t,"</span>")},tagTreeFromString=function(t){return'<span class="string"> \''.concat(t,"' </span>")},tagTreeFromNull=function(t){return'<span class="null"> '.concat(t," </span>")},tagTree=function(t,n){return isDict(t)?isNode(t)?tagTreeFromNode(t,n):tagTreeFromDict(t,n):isArray(t)?tagTreeFromArray(t,n):isBool(t)?tagTreeFromBool(t):isNumber(t)?tagTreeFromNumber(t):isString(t)?tagTreeFromString(t):isNull(t)?tagTreeFromNull(t):void 0};